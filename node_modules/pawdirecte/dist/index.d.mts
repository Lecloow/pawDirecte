import { Fetcher, Response } from '@literate.ink/utilities';

declare class BadCredentials extends Error {
    constructor();
}

declare class BadDoubleAuth extends Error {
    constructor();
}

declare class DoubleAuthRequired extends Error {
    constructor();
}

declare class InvalidVersion extends Error {
    constructor();
}

declare class SessionTokenRequired extends Error {
    constructor();
}

declare class UnknownEnumValue extends Error {
    constructor(label: string, value: string);
}

type Account = Readonly<{
    loginID: number;
    id: number;
    userID: string;
    username: string;
    kind: AccountKind;
    ogecID: string;
    main: boolean;
    lastConnection: Date;
    firstName: string;
    lastName: string;
    email: string;
    phone: string;
    schoolName: string;
    schoolUAI: string;
    schoolLogoPath: string;
    /** As HEX. */
    schoolAgendaColor: string;
    access_token: string;
    socket_token: string;
    gender: "M" | "F";
    profilePictureURL: string;
    modules: any[];
    /**
     * current year cycle
     * @example "2023-2024"
     */
    currentSchoolCycle: string;
    class: {
        short: string;
        long: string;
    };
}>;

declare const AccountKind: {
    readonly Student: "E";
};
type AccountKind = typeof AccountKind[keyof typeof AccountKind];

type AttendanceItem = Readonly<{
    id: number;
    studentId: number;
    studentName: string;
    reason: string;
    date: Date;
    dateOfEvent: Date;
    label: string;
    teacher: string;
    comment: string;
    subjectName: string;
    justified: boolean;
    justificationType: string;
    onlineJustification: boolean;
    todo: string;
    kind: AttendanceItemKind;
    displayDate: string;
}>;

declare const AttendanceItemKind: {
    readonly PUNITION: "Punition";
    readonly RETARD: "Retard";
    readonly ABSENCE: "Absence";
    readonly DISPENSE: "Dispense";
};
type AttendanceItemKind = (typeof AttendanceItemKind)[keyof typeof AttendanceItemKind];

declare const ReservationWeekdays: {
    monday: string;
    tuesday: string;
    wednesay: string;
    thursday: string;
    friday: string;
    saturday: string;
    sunday: string;
};
declare const ReservationMeals: {
    breakfast: string;
    lunch: string;
    diner: string;
};
type CantineReservations = Readonly<{
    badge: number;
    /**
     * @example "Externe"
     */
    diet: string;
    meals: {
        [key in keyof typeof ReservationWeekdays]: {
            [key in keyof typeof ReservationMeals]: boolean;
        };
    };
}>;
type CantineBarcode = Readonly<{
    badgeNumber: number;
}>;

type Document = Readonly<{
    id: number;
    name: string;
    date: Date;
    kind: DocumentKind;
    signatureRequired: boolean;
    signature: any;
}>;

declare const DocumentKind: {
    readonly Grades: "Note";
    readonly Document: "Doc";
    readonly SchoolLife: "Viesco";
    readonly Invoice: "Fac";
    readonly Registration: "Inscr";
    readonly Textbook: "FICHIER_CDT";
    readonly Other: "";
};
type DocumentKind = (typeof DocumentKind)[keyof typeof DocumentKind];

type DoubleAuth = Readonly<{
    name: string;
    value: string;
}>;

type DoubleAuthChallenge = Readonly<{
    question: string;
    answers: string[];
}>;

declare enum FileKind {
    Cloud = "CLOUD",
    Homework = "FICHIER_CDT",
    Attachement = "PIECE_JOINTE",
    CantineMenu = "FICHIER_MENU_RESTAURATION",
    Administrative = "ADMINISTRATIF",
    Other = ""
}

declare const GradeKind: {
    readonly Error: -1;
    readonly Grade: 0;
    readonly Absent: 1;
    readonly Exempted: 2;
    readonly NotGraded: 3;
    readonly Waiting: 4;
};
type GradeKind = (typeof GradeKind)[keyof typeof GradeKind];

type GradeValue = Readonly<{
    kind: GradeKind;
    points: number;
}>;

type Skill = Readonly<{
    id: number;
    value: number;
    description: string;
    name: string;
}>;

type Subject = Readonly<{
    id: string;
    subSubjectId?: string;
    name: string;
}>;

type Grade = Readonly<{
    comment: string;
    /**
     * @example "Devoir Maison"
     * @example "Devoir sur table"
     */
    examType: string;
    period: {
        id: string;
        name: string;
    };
    subject: Subject;
    coefficient: number;
    value: GradeValue;
    max: GradeValue;
    min: GradeValue;
    average: GradeValue;
    isOptional: boolean;
    outOf: number;
    date: Date;
    subjectFilePath: string;
    correctionFilePath: string;
    skills: Skill[];
}>;

type SubjectOverview = {
    classAverage: GradeValue;
    overallAverage: GradeValue;
    subjects: {
        name: string;
        id: string;
        childSubjectId: string;
        isChildSubject: boolean;
        color: string;
        coefficient: number;
        classAverage: GradeValue;
        maxAverage: GradeValue;
        minAverage: GradeValue;
        studentAverage: GradeValue;
        outOf: GradeValue;
    }[];
};
type GradesOverview = {
    [key: string]: SubjectOverview;
};

type HomepageTimelineItem = Readonly<{
    id: string;
    content: string;
    authorName: string;
    creationDate: Date;
    startDate: Date;
    endDate: Date;
    colorName: string;
}>;

type Homework = Readonly<{
    id: number;
    subject: string;
    teacher: string;
    exam: boolean;
    done: boolean;
    content: string;
    createdDate: Date;
    attachments: Document[];
}>;
type ComingHomework = Readonly<{
    id: number;
    subject: string;
    isExam: boolean;
    done: boolean;
    createdDate: Date;
}>;
type ClassSubject = Readonly<{
    date: Date;
    id: number;
    subject: string;
    teacher: string;
    content: string;
    attachments: Document[];
}>;

type Period = Readonly<{
    id: string;
    name: string;
    yearly: boolean;
    isMockExam: boolean;
    isEnded: boolean;
    startDate: Date;
    endDate: Date;
    councilDate?: Date;
    councilStartHour?: string;
    councilEndHour?: string;
    councilClassroom?: string;
}>;

interface Session {
    readonly username: string;
    readonly device_uuid: string;
    token?: string | null;
    accessToken?: string | null;
    double_auth?: DoubleAuth | null;
    fetcher?: Fetcher;
}

type TimelineItem = Readonly<{
    title: string;
    description: string;
    content: string;
    elementID: number;
    elementKind: TimelineItemKind;
    date: Date;
}>;

declare const TimelineItemKind: {
    readonly Note: "Note";
    readonly VieScolaire: "VieScolaire";
    readonly ReunionPP: "ReunionPP";
    readonly ReunionPPFamille: "ReunionPPFamille";
    readonly Actualite: "Actualite";
    readonly Messagerie: "Messagerie";
    readonly DocumentFamille: "DocumentFamille";
    readonly Document: "Document";
};
type TimelineItemKind = (typeof TimelineItemKind)[keyof typeof TimelineItemKind];

type TimetableItem = Readonly<{
    id: number;
    /** As HEX. */
    color: string;
    startDate: Date;
    endDate: Date;
    subjectName: string;
    subjectShortName: string;
    room: string;
    teacher: string;
    kind: TimetableItemKind;
    cancelled: boolean;
    updated: boolean;
    notes: string;
}>;

declare const TimetableItemKind: {
    readonly COURS: "COURS";
    readonly PERMANENCE: "PERMANENCE";
    readonly CONGE: "CONGE";
    readonly EVENEMENT: "EVENEMENT";
    readonly SANCTION: "SANCTION";
};
type TimetableItemKind = (typeof TimetableItemKind)[keyof typeof TimetableItemKind];

type WorkspaceItem = Readonly<{
    id: string;
    title: string;
    description: string;
    summary: string;
    cloud: boolean;
    discussion: boolean;
    agenda: boolean;
    isPublic: boolean;
    isOpen: boolean;
    kind: WorkspaceItemKind;
    isMember: boolean;
    isAdmin: boolean;
    teacherRooms: boolean;
    createdBy: string;
    permissions: 0 | 1 | 2;
    nbMembers: 0;
    colorEventAgenda: string;
    createdAt?: string;
}>;

declare const WorkspaceItemKind: {
    readonly LIBRE: "LIBRE";
};
type WorkspaceItemKind = (typeof WorkspaceItemKind)[keyof typeof WorkspaceItemKind];

declare const accountEdforms: (session: Session, account: Account) => Promise<Array<unknown>>;

type AttendanceResponse = Readonly<{
    punishments: Array<AttendanceItem>;
    absences: Array<AttendanceItem>;
    exemptions: Array<AttendanceItem>;
}>;
declare const studentAttendance: (session: Session, account: Account) => Promise<AttendanceResponse>;

type CantineResponse = Readonly<{
    reservation?: CantineReservations;
    barcode?: CantineBarcode;
}>;
/**
 * Returns the modules "RESERVATIONS" and "CANTINE_BARCODE"
 */
declare const studentCantine: (account: Account) => Promise<CantineResponse>;

/**
 * @param archive "The year of document, if it's an archive; YYYY format."
 */
declare const studentDocuments: (session: Session, archive?: string) => Promise<Document[]>;

declare const buildPawdirecteFileDownloadUrl: (type: FileKind, id: number | string, year?: string) => string;
/**
 * @param type "The type of file to download"
 * @param id "The file ID or UNC path"
 * @param year "The year of document; YYYY format." ONLY AVAILABLE FOR ADMINISTRATIVE AND MESSAGES ATTACHEMENTS FILES
 */
declare const getFile: (session: Session, type: FileKind, id: number | string, year?: string) => Promise<Response>;

type GradesResponse = {
    grades: Array<Grade>;
    periods: Array<Period>;
    overview: GradesOverview;
};
/**
 * @param session
 * @param account
 * @param year "The year to fetch grades in YYYY format." SENSITIVE PARAMETER NOT ALL ACCOUNTS CAN DO THAT
 */
declare const studentGrades: (session: Session, account: Account, year: string) => Promise<GradesResponse>;

declare const studentHomepageTimeline: (session: Session, account: Account) => Promise<Array<HomepageTimelineItem>>;

declare const studentHomeworks: (session: Session, account: Account, date: string) => Promise<{
    homeworks: Homework[];
    subjects: ClassSubject[];
}>;
declare const studentComingHomeworks: (session: Session, account: Account) => Promise<{
    date: Date;
    homeworks: ComingHomework[];
}[]>;
declare const setHomeworkState: (session: Session, account: Account, homeworkId: number, done: boolean) => Promise<void>;

type ReceivedMessage = Readonly<{
    id: number;
    type: string;
    date: Date;
    read: boolean;
    subject: string;
    canAnswer: boolean;
    content: string;
    sender: string;
    files: {
        type: FileKind;
        id: number;
        name: string;
    }[];
}>;

declare const studentReceivedMessages: (session: Session, account: Account) => Promise<{
    chats: Array<ReceivedMessage>;
    canReply: boolean;
}>;
declare const readMessage: (session: Session, account: Account, id: number) => Promise<ReceivedMessage>;

declare const studentTimeline: (session: Session, account: Account) => Promise<Array<TimelineItem>>;

/**
 * @param startDate Timetable starting from this date.
 * @param endDate When not defined, it's the same as `from` so it displays the timetable for the day.
 */
declare const studentTimetable: (session: Session, account: Account, startDate: Date, endDate?: Date) => Promise<Array<TimetableItem>>;

declare const studentVisios: (session: Session, account: Account) => Promise<Array<unknown>>;

declare const studentWorkspace: (session: Session, account: Account) => Promise<Array<WorkspaceItem>>;

declare const initDoubleAuth: (session: Session) => Promise<DoubleAuthChallenge>;
declare const checkDoubleAuth: (session: Session, answer: string) => Promise<boolean>;

declare const login: (session: Session, password: string) => Promise<Array<Account>>;
declare const refresh: (session: Session, account_kind: AccountKind) => Promise<Array<Account>>;
declare const setAccessToken: (session: Session, account: Account) => void;

export { type Account, AccountKind, type AttendanceItem, AttendanceItemKind, BadCredentials, BadDoubleAuth, type CantineBarcode, type CantineReservations, type ClassSubject, type ComingHomework, type Document, DocumentKind, type DoubleAuth, type DoubleAuthChallenge, DoubleAuthRequired, FileKind, type Grade, GradeKind, type GradeValue, type GradesOverview, type HomepageTimelineItem, type Homework, InvalidVersion, type Period, ReservationMeals, ReservationWeekdays, type Session, SessionTokenRequired, type Skill, type Subject, type SubjectOverview, type TimelineItem, TimelineItemKind, type TimetableItem, TimetableItemKind, UnknownEnumValue, type WorkspaceItem, WorkspaceItemKind, accountEdforms, buildPawdirecteFileDownloadUrl, checkDoubleAuth, getFile, initDoubleAuth, login, readMessage, refresh, setAccessToken, setHomeworkState, studentAttendance, studentCantine, studentComingHomeworks, studentDocuments, studentGrades, studentHomepageTimeline, studentHomeworks, studentReceivedMessages, studentTimeline, studentTimetable, studentVisios, studentWorkspace };
