{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","file":"index.mjs","sourcesContent":["import { splitCookiesString } from \"set-cookie-parser\";\n\nexport const findValueBetween = (plain: string, start: string, end: string): string | null => {\n  let startIndex = plain.indexOf(start);\n  if (startIndex === -1) return null;\n  startIndex = startIndex + start.length;\n  \n  const endIndex = plain.indexOf(end, startIndex);\n  if (endIndex === -1) return null;\n  \n  return plain.slice(startIndex, endIndex);\n};\n\n/**\n * Special typing for React Native.\n */\nexport type ReactNativeFileFromURI = {\n  uri: string\n  name: string\n  type: string\n  size: number\n};\n\nexport type FormDataFile = Blob | File | Buffer | ArrayBuffer | Uint8Array | ReactNativeFileFromURI;\n\ninterface HeadersLike {\n  get (key: string): string | null\n};\n\n/**\n * Extracts cookies from the \"set-cookie\" header of a response.\n */\nexport const getCookiesFromResponse = (response: Response): string[] => {\n  const setCookieHeader = getHeaderFromResponse(response, \"set-cookie\");\n  if (setCookieHeader === null) return [];\n\n  return splitCookiesString(setCookieHeader)\n    .map((cookie) => cookie.split(\";\")[0]);\n};\n\n/**\n * Extracts a header from a response.\n */\nexport const getHeaderFromResponse = (response: Response, item: string): string | null => {\n  const headers = response.headers;\n\n  return isHeaderInstance(headers)\n    ? headers.get(item)\n    : (headers as Record<string, string>)[item];\n};\n\nconst isHeaderInstance = (headers: Response[\"headers\"]): headers is Headers => {\n  return typeof headers.get === \"function\";\n}\n\nexport const setCookiesArrayToRequest = (request: Request, cookies: string[]): void => {\n  setHeaderToRequest(request, \"Cookie\", cookies.join(\"; \"))\n}\n\nexport const setCookiesObjectToRequest = (request: Request, cookies: Record<string, string>): void => {\n  const array = Object.entries(cookies).map(([key, value])=>`${key}=${value}`)\n  setCookiesArrayToRequest(request, array)\n}\n\nexport const setHeaderToRequest = (request: Request, key: string, value: string): void => {\n  request.headers ||= {};\n  \n  if (isHeaderInstance(request.headers)) {\n    request.headers.set(key, value);\n  }\n  else {\n    request.headers[key] = value;\n  }\n}\n\nexport interface Request {\n  url: URL\n  \n  /**\n   * @default \"GET\"\n   */\n  method?: \"GET\" | \"POST\"\n\n  /**\n   * Body of the request.\n   * @default undefined\n   */\n  content?: string\n  \n  /**\n   * Headers that should be appended to the request.\n   * @default {}\n   */\n  headers?: Record<string, string> | Headers\n  \n  /**\n   * @default \"follow\"\n   */\n  redirect?: \"follow\" | \"manual\"\n}\n\nexport interface Response {\n  status: number\n  content: string\n  headers: Record<string, string> | Headers | HeadersLike\n}\n\nexport type Fetcher = (req: Request) => Promise<Response>;\n\n/**\n * Simple and default fetcher using `fetch` if none was given\n * in the authentication function.\n * \n * Should work out-of-the-box on Node.js>=18, Deno, Bun, React Native\n * and probably more environments.\n */\nexport const defaultFetcher = async (req: Request): Promise<Response> => {\n  const response = await fetch(req.url.href, {\n    redirect: req.redirect ?? \"follow\",\n    headers: req.headers ?? {},\n    method: req.method ?? \"GET\",\n    body: req.content,\n\n    // we don't want to send cookies, only the ones we set manually.\n    credentials: \"omit\"\n  });\n\n  return {\n    status: response.status,\n    content: await response.text(),\n    headers: response.headers\n  };\n}\n"]}