declare const findValueBetween: (plain: string, start: string, end: string) => string | null;
/**
 * Special typing for React Native.
 */
type ReactNativeFileFromURI = {
    uri: string;
    name: string;
    type: string;
    size: number;
};
type FormDataFile = Blob | File | Buffer | ArrayBuffer | Uint8Array | ReactNativeFileFromURI;
interface HeadersLike {
    get(key: string): string | null;
}
/**
 * Extracts cookies from the "set-cookie" header of a response.
 */
declare const getCookiesFromResponse: (response: Response) => string[];
/**
 * Extracts a header from a response.
 */
declare const getHeaderFromResponse: (response: Response, item: string) => string | null;
declare const setCookiesArrayToRequest: (request: Request, cookies: string[]) => void;
declare const setCookiesObjectToRequest: (request: Request, cookies: Record<string, string>) => void;
declare const setHeaderToRequest: (request: Request, key: string, value: string) => void;
interface Request {
    url: URL;
    /**
     * @default "GET"
     */
    method?: "GET" | "POST";
    /**
     * Body of the request.
     * @default undefined
     */
    content?: string;
    /**
     * Headers that should be appended to the request.
     * @default {}
     */
    headers?: Record<string, string> | Headers;
    /**
     * @default "follow"
     */
    redirect?: "follow" | "manual";
}
interface Response {
    status: number;
    content: string;
    headers: Record<string, string> | Headers | HeadersLike;
}
type Fetcher = (req: Request) => Promise<Response>;
/**
 * Simple and default fetcher using `fetch` if none was given
 * in the authentication function.
 *
 * Should work out-of-the-box on Node.js>=18, Deno, Bun, React Native
 * and probably more environments.
 */
declare const defaultFetcher: (req: Request) => Promise<Response>;

export { type Fetcher, type FormDataFile, type ReactNativeFileFromURI, type Request, type Response, defaultFetcher, findValueBetween, getCookiesFromResponse, getHeaderFromResponse, setCookiesArrayToRequest, setCookiesObjectToRequest, setHeaderToRequest };
